#!/usr/bin/env python3
# Copyright 2018 Anton Maksimovich <antonio.maksimovich@gmail.com>
# Copyright 2018 Simon Suprun <simonsuprun@gmail.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Tests related to the hubot-viva-las-vegas script. """

from argparse import ArgumentParser
from datetime import datetime, timedelta

from base import RocketChatTestCase

FROM_MSG = 'Ok, —Å –∫–∞–∫–æ–≥–æ —á–∏—Å–ª–∞? (–¥–¥.–º–º)'

INVALID_DATE_MSG = '–£–∫–∞–∑–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ —è–≤–ª—è–µ—Ç—Å—è –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–π. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.'

PERMISSION_DENIED_MSG = '–£ —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã üôÑ'

TO_MSG = '–û—Ç–ª–∏—á–Ω–æ, –ø–æ –∫–∞–∫–æ–µ? (–¥–¥.–º–º)'


class VivaLasVegasScriptTestCase(RocketChatTestCase):  # pylint: disable=too-many-instance-attributes, too-many-public-methods
    """Tests for the hubot-viva-las-vegas script. """

    def __init__(self, addr, username, password, **kwargs):
        RocketChatTestCase.__init__(self, addr, username, password, **kwargs)

        self.schedule_pre_test_case('choose_general_channel')

        self.schedule_pre_test_case('_send_birthday_to_bot')

        self._bot_name = 'meeseeks'

        self._dividing_message = 'Hello from dividing message for tests'

        self._vacation_start_date = self._figure_out_date(15)

        self._too_close_start_date_1 = self._figure_out_date(1)

        self._too_close_start_date_2 = self._figure_out_date(2)

        self._vacation_end_date = self._figure_out_date(29)

        self._too_long_end_date = self._figure_out_date(44)

        self._max_response_date = self._figure_out_date(7)

        self._invalid_dates = ('99.99', '31.09', '30.02')

    #
    # Private methods
    #

    @staticmethod
    def _figure_out_date(days, date_format='%d.%m'):
        return (datetime.now() + timedelta(days=days)).strftime(date_format)

    def _send_birthday_to_bot(self):
        self.switch_channel(self._bot_name)
        self.send_message('01.01.1990')

    @staticmethod
    def _get_pre_weekends_dates():
        date = datetime.now() + timedelta(days=15)
        day = date.weekday()
        shift = 4 - day if day < 4 else 6 - day + 4
        start_date = date.strftime('%d.%m')
        end_date = (date + timedelta(days=shift)).strftime('%d.%m')

        return start_date, end_date, shift

    def _send_leave_request(self):
        self.send_message('{} —Ö–æ—á—É –≤ –æ—Ç–ø—É—Å–∫'.format(self._bot_name))

        assert self.check_latest_response_with_retries(FROM_MSG)

        self.send_message('{} —Ö–æ—á—É –≤ –æ—Ç–ø—É—Å–∫'.format(self._bot_name))

        assert self.check_latest_response_with_retries(
            '–î–∞–≤–∞–π –ø–æ –ø–æ—Ä—è–¥–∫—É!\n'
            'C –∫–∞–∫–æ–≥–æ —á–∏—Å–ª–∞ —Ç—ã —Ö–æ—á–µ—à—å —É–π—Ç–∏ –≤ –æ—Ç–ø—É—Å–∫? (–¥–¥.–º–º)')

    def _input_start_date(self):
        for date in self._invalid_dates:
            self.send_message('{0} {1}'.format(self._bot_name, date))

            assert self.check_latest_response_with_retries(INVALID_DATE_MSG)

        self.send_message('{0} {1}'.format(self._bot_name,
                                           self._too_close_start_date_1))

        assert self.check_latest_response_with_retries(
            '–ù—É–∂–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –æ—Ç–ø—É—Å–∫ –º–∏–Ω–∏–º—É–º –∑–∞ 7 –¥–Ω–µ–π, –∞ —Ç–≤–æ–π - —É–∂–µ –∑–∞–≤—Ç—Ä–∞. '
            '–ü–æ–ø—Ä–æ–±—É–π –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É –ø–æ–∑–¥–Ω–µ–µ {}.'.format(
                self._figure_out_date(7, '%d.%m.%Y')))

        self.send_message(
            '{0} {1}'.format(self._bot_name, self._too_close_start_date_2))

        assert self.check_latest_response_with_retries(
            '–ù—É–∂–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –æ—Ç–ø—É—Å–∫ –º–∏–Ω–∏–º—É–º –∑–∞ 7 –¥–Ω–µ–π, '
            '–∞ —Ç–≤–æ–π - —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ 2 –¥–Ω—è. '
            '–ü–æ–ø—Ä–æ–±—É–π –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É –ø–æ–∑–¥–Ω–µ–µ {}.'.format(
                self._figure_out_date(7, '%d.%m.%Y')))

        self.send_message('{0} {1}'.format(self._bot_name,
                                           self._vacation_start_date))
        assert self.check_latest_response_with_retries(TO_MSG)

    def _input_end_date(self):
        for date in self._invalid_dates:
            self.send_message('{0} {1}'.format(self._bot_name, date))

            assert self.check_latest_response_with_retries(INVALID_DATE_MSG)

        self.send_message('{0} {1}'.format(self._bot_name,
                                           self._too_long_end_date))

        assert self.check_latest_response_with_retries(
            r'–û—Ç–ø—É—Å–∫ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é \d* –¥(–Ω—è|–Ω–µ–π|–µ–Ω—å).*', match=True)

        self.send_message('{0} {1}'.format(self._bot_name,
                                           self._vacation_end_date))

        assert self.check_latest_response_with_retries(
            r'–ó–Ω–∞—á–∏—Ç —Ç—ã –ø–ª–∞–Ω–∏—Ä—É–µ—à—å –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –æ—Ç–ø—É—Å–∫–µ \d* –¥(–Ω—è|–Ω–µ–π|–µ–Ω—å).*',
            match=True)

    def _confirm_dates(self, confirm=True):
        self.send_message('{0} {1}'.format(
            self._bot_name, '–î–∞, –ø–ª–∞–Ω–∏—Ä—É—é' if confirm else '–ù–µ—Ç, –Ω–µ –ø–ª–∞–Ω–∏—Ä—É—é'))

        assert self.check_latest_response_with_retries(
            '–ó–∞—è–≤–∫–∞ –Ω–∞ –æ—Ç–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. '
            '–û—Ç–≤–µ—Ç –ø–æ—Å—Ç—É–ø–∏—Ç –Ω–µ –ø–æ–∑–∂–µ —á–µ–º —á–µ—Ä–µ–∑ 7 –¥–Ω–µ–π.'
            if confirm
            else '–Ø –ø—Ä–µ—Ä–≤–∞–ª –ø—Ä–æ—Ü–µ—Å—Å —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞ –æ—Ç–ø—É—Å–∫.')

    def _approve_request(self, username=None, is_admin=True):
        if not username:
            username = self.username
        self.send_message('{0} –æ–¥–æ–±—Ä–∏—Ç—å –∑–∞—è–≤–∫—É @{1}'.format(self._bot_name,
                                                            username))
        if is_admin:

            assert self.check_latest_response_with_retries(
                "–ó–∞—è–≤–∫–∞ @{} –æ–¥–æ–±—Ä–µ–Ω–∞. "
                "–Ø –æ—Ç–ø—Ä–∞–≤–ª—é —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —ç—Ç–æ–º.".format(username))

        else:

            assert self.check_latest_response_with_retries(
                PERMISSION_DENIED_MSG)

    def _reject_request(self, username=None, is_admin=True):
        if not username:
            username = self.username
        self.send_message('{0} –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É @{1}'.format(self._bot_name,
                                                             username))
        if is_admin:

            assert self.check_latest_response_with_retries(
                '–ó–∞—è–≤–∫–∞ @{} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. '
                '–Ø –æ—Ç–ø—Ä–∞–≤–ª—é —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± '
                '—ç—Ç–æ–º.'.format(username))
        else:

            assert self.check_latest_response_with_retries(
                PERMISSION_DENIED_MSG)

    def _cancel_approved_request(self, username=None, is_admin=True):
        if not username:
            username = self.username
        self.send_message('{0} –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É @{1}'.format(self._bot_name,
                                                            username))
        if is_admin:

            assert self.check_latest_response_with_retries(
                "–û—Ç–ø—É—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{} –æ—Ç–º–µ–Ω–µ–Ω.".format(username))
        else:

            assert self.check_latest_response_with_retries(
                PERMISSION_DENIED_MSG)

    def _send_dividing_message(self):
        self.send_message(self._dividing_message)

    def _check_approve_notification(self):

        assert self.get_message_by_number(-2).text == self._dividing_message

        assert self.check_latest_response_with_retries(
            '–ó–∞—è–≤–∫–∞ –Ω–∞ –æ—Ç–ø—É—Å–∫ –æ–¥–æ–±—Ä–µ–Ω–∞.')

    def _check_reject_notification(self):

        assert self.get_message_by_number(-2).text == self._dividing_message

        assert self.check_latest_response_with_retries(
            '–ó–∞—è–≤–∫–∞ –Ω–∞ –æ—Ç–ø—É—Å–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.')

    def _check_cancel_notification(self):

        assert self.get_message_by_number(-2).text == self._dividing_message

        assert self.check_latest_response_with_retries(
            '–£–ø—Å, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{0} '
            '—Ç–æ–ª—å–∫–æ —á—Ç–æ –æ—Ç–º–µ–Ω–∏–ª —Ç–≤–æ—é –∑–∞—è–≤–∫—É –Ω–∞ –æ—Ç–ø—É—Å–∫.'.format(self.username))

    def _check_vacation_notification(self):

        assert self.get_message_by_number(-2).text == self._dividing_message

        assert self.check_latest_response_with_retries(
            '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{0} —Ö–æ—á–µ—Ç –≤ –æ—Ç–ø—É—Å–∫ —Å .*'.format(self.username),
            match=True)

    def _check_approve_notification_in_channel(self):

        assert self.get_message_by_number(-2).text == self._dividing_message

        assert self.check_latest_response_with_retries(
            '–ó–∞—è–≤–∫–∞ –Ω–∞ –æ—Ç–ø—É—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{0} '
            '–±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º @{0}.'.format(self.username))

    def _check_reject_notification_in_channel(self):

        assert self.get_message_by_number(-2).text == self._dividing_message

        assert self.check_latest_response_with_retries(
            '–ó–∞—è–≤–∫–∞ –Ω–∞ –æ—Ç–ø—É—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{0} '
            '–±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º @{0}.'.format(self.username))

    def _check_cancel_notification_in_channel(self):

        assert self.get_message_by_number(-2).text == self._dividing_message

        assert self.check_latest_response_with_retries(
            '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{0} –æ—Ç–º–µ–Ω–∏–ª '
            '–∑–∞—è–≤–∫—É –Ω–∞ –æ—Ç–ø—É—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{0}.'.format(self.username))

    def _send_work_from_home_request(self, date, expect, reject=True):
        self.send_message(
            '{} —Ä–∞–±–æ—Ç–∞—é –∏–∑ –¥–æ–º–∞'.format(self._bot_name)
        )
        assert self.check_latest_response_with_retries(
            'Ok, –≤ –∫–∞–∫–æ–π –¥–µ–Ω—å? (—Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞/–¥–¥.–º–º)'
        )

        self.send_message(
            '{} {}'.format(self._bot_name, date)
        )
        assert self.check_latest_response_with_retries(
            '–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω –ª–∏ —ç—Ç–æ—Ç –¥–µ–Ω—å —Å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–º/—Ç–∏–º–ª–∏–¥–æ–º?\n'
            '–î–∞\n'
            '–ù–µ—Ç'
        )

        self.send_message(
            '{} –î–∞, —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω'.format(self._bot_name)
        )
        assert self.check_latest_response_with_retries(
            r'(^–û—Ç–ª–∏—á–Ω–æ.(.*) –¢—ã —Ä–∞–±–æ—Ç–∞–µ—à—å –∏–∑ –¥–æ–º–∞ {}.$)'.format(expect),
            match=True
        )

        if reject:
            self.send_message(
                '{} –ù–µ —Ä–∞–±–æ—Ç–∞—é –∏–∑ –¥–æ–º–∞'.format(self._bot_name)
            )
            assert self.check_latest_response_with_retries(
                r'(^–Ø —Ç–µ–±—è –ø–æ–Ω—è–ª.(.*)$)',
                match=True
            )

    #
    # Public methods
    #

    def test_sending_request_and_approving_it(self):
        """Tests if it's possible to send a leave request and approve it. """

        self.choose_general_channel()
        self._send_leave_request()
        self._input_start_date()
        self._input_end_date()
        self._confirm_dates()
        self._approve_request()
        self._cancel_approved_request()

    def test_sending_request_and_rejecting_it(self):
        """Tests if it's possible to send a leave request and reject it. """

        self._send_leave_request()
        self._input_start_date()
        self._input_end_date()
        self._confirm_dates()
        self._reject_request()

    def test_approve_notification(self):
        """Tests if it's possible to send a leave request, approve it and
        receive the corresponding message from the bot.
        """

        self.switch_channel(self._bot_name)
        self._send_dividing_message()
        self.choose_general_channel()
        self._send_leave_request()
        self._input_start_date()
        self._input_end_date()
        self._confirm_dates()
        self._approve_request()
        self.switch_channel(self._bot_name)
        self._check_approve_notification()
        self.choose_general_channel()
        self._cancel_approved_request()

    def test_reject_notification(self):
        """Tests if it's possible to send a leave request, reject it and
        receive the corresponding message from the bot.
        """

        self.switch_channel(self._bot_name)
        self._send_dividing_message()
        self.choose_general_channel()
        self._send_leave_request()
        self._input_start_date()
        self._input_end_date()
        self._confirm_dates()
        self._reject_request()
        self.switch_channel(self._bot_name)
        self._check_reject_notification()

    def test_cancel_notification(self):
        """Tests if it's possible to send a leave request, approve and cancel
        it, and receive the corresponding message from the bot.
        """

        self.choose_general_channel()
        self._send_leave_request()
        self._input_start_date()
        self._input_end_date()
        self._confirm_dates()
        self._approve_request()
        self.switch_channel(self._bot_name)
        self._send_dividing_message()
        self.choose_general_channel()
        self._cancel_approved_request()
        self.switch_channel(self._bot_name)
        self._check_cancel_notification()

    def test_for_adding_weekends_to_vacation(self):
        """Tests if the bot extends the length of the vacation period with
        weekends if the end of the period is on Friday.
        """

        self.send_message('{} —Ö–æ—á—É –≤ –æ—Ç–ø—É—Å–∫'.format(self._bot_name))

        assert self.check_latest_response_with_retries(FROM_MSG)

        start_date, end_date, _ = self._get_pre_weekends_dates()
        self.send_message('{0} {1}'.format(self._bot_name, start_date))

        assert self.check_latest_response_with_retries(TO_MSG)

        self.send_message('{0} {1}'.format(self._bot_name, end_date))

        assert self.check_latest_response_with_retries(
            r'–ó–Ω–∞—á–∏—Ç —Ç—ã –ø–ª–∞–Ω–∏—Ä—É–µ—à—å –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –æ—Ç–ø—É—Å–∫–µ \d* –¥(–Ω—è|–Ω–µ–π|–µ–Ω—å).*',
            match=True)

        self.send_message('{0} {1}'.format(self._bot_name, '–¥–∞'))

        self.send_message('{0} –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É @{1}'.format(self._bot_name,
                                                             self.username))

    def test_vacation_notification_in_channel(self):
        """Tests if the bot informs the users in the #leave-coordination
        channel when someone sends a leave request.
        """

        self.switch_channel('leave-coordination')
        self._send_dividing_message()
        self.choose_general_channel()
        self._send_leave_request()
        self._input_start_date()
        self._input_end_date()
        self._confirm_dates()
        self.switch_channel('leave-coordination')
        self._check_vacation_notification()
        self.choose_general_channel()
        self._approve_request()
        self._cancel_approved_request()

    def test_receiving_approval_in_channel(self):
        """Tests if the bot informs the users in the #leave-coordination
        channel when the admin approves a leave request.
        """

        self._send_leave_request()
        self._input_start_date()
        self._input_end_date()
        self._confirm_dates()
        self.switch_channel('leave-coordination')
        self._send_dividing_message()
        self.choose_general_channel()
        self._approve_request()
        self.switch_channel('leave-coordination')
        self._check_approve_notification_in_channel()
        self.choose_general_channel()
        self._cancel_approved_request()

    def test_receiving_reject_in_channel(self):
        """Tests if the bot informs the users in the #leave-coordination
        channel when the admin rejects a leave request.
        """

        self._send_leave_request()
        self._input_start_date()
        self._input_end_date()
        self._confirm_dates()
        self.switch_channel('leave-coordination')
        self._send_dividing_message()
        self.choose_general_channel()
        self._reject_request()
        self.switch_channel('leave-coordination')
        self._check_reject_notification_in_channel()

    def test_cancel_notification_in_channel(self):
        """Tests if the bot informs the users in the #leave-coordination
        channel when the admin cancels the approved leave request.
        """

        self.choose_general_channel()
        self._send_leave_request()
        self._input_start_date()
        self._input_end_date()
        self._confirm_dates()
        self._approve_request()
        self.switch_channel('leave-coordination')
        self._send_dividing_message()
        self.choose_general_channel()
        self._cancel_approved_request()
        self.switch_channel('leave-coordination')
        self._check_cancel_notification_in_channel()

    def test_sending_request_and_approving_it_without_permission(self):
        """Tests if it's not possible to approve a leave request without the
        corresponding permissions.
        """

        self.logout()
        self.login(use_test_user=True)
        self.choose_general_channel()

        self._send_leave_request()
        self._input_start_date()
        self._input_end_date()
        self._confirm_dates()
        self._approve_request(username=self.test_username, is_admin=False)

        self.logout()
        self.login()
        self.switch_channel('leave-coordination')
        self._approve_request(username=self.test_username)
        self._cancel_approved_request(username=self.test_username)

    def test_sending_request_and_rejecting_it_without_permission(self):
        """Tests if it's not possible to reject a leave request without the
        corresponding permissions.
        """

        self.logout()
        self.login(use_test_user=True)
        self.choose_general_channel()

        self._send_leave_request()
        self._input_start_date()
        self._input_end_date()
        self._confirm_dates()
        self._reject_request(username=self.test_username, is_admin=False)

        self.logout()
        self.login()
        self.switch_channel('leave-coordination')
        self._reject_request(username=self.test_username)

    def test_sending_work_from_home_request_for_wrong_date(self):
        """Tests if it's not possible to send a work from home request for a wrong date. """

        self.choose_general_channel()

        self.send_message(
            '{} —Ä–∞–±–æ—Ç–∞—é –∏–∑ –¥–æ–º–∞'.format(self._bot_name)
        )
        assert self.check_latest_response_with_retries(
            'Ok, –≤ –∫–∞–∫–æ–π –¥–µ–Ω—å? (—Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞/–¥–¥.–º–º)'
        )

        today = datetime.now()
        later_than_2_weeks_ahead = (
            (today + timedelta(days=(13 - today.weekday()))).strftime('%d.%m')
        )
        self.send_message(
            '{} {}'.format(self._bot_name, later_than_2_weeks_ahead)
        )
        assert self.check_latest_response_with_retries(
            '–ù–µ–ª—å–∑—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–µ–Ω—å —Ä–∞–±–æ—Ç—ã –∏–∑ –¥–æ–º–∞ –±–æ–ª—å—à–µ, —á–µ–º –Ω–∞ –¥–≤–µ –Ω–µ–¥–µ–ª–∏ –≤–ø–µ—Ä–µ–¥.'
        )

        yesterday = (today - timedelta(days=1)).strftime('%d.%m')
        self.send_message(
            '{} {}'.format(self._bot_name, yesterday)
        )
        assert self.check_latest_response_with_retries(
            '–ù–µ–ª—å–∑—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–µ–Ω—å —Ä–∞–±–æ—Ç—ã –∏–∑ –¥–æ–º–∞ –±–æ–ª—å—à–µ, —á–µ–º –Ω–∞ –¥–≤–µ –Ω–µ–¥–µ–ª–∏ –≤–ø–µ—Ä–µ–¥.'
        )

        self.send_message(
            '{} —Å–µ–≥–æ–¥–Ω—è'.format(self._bot_name)
        )
        assert self.check_latest_response_with_retries(
            '–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω –ª–∏ —ç—Ç–æ—Ç –¥–µ–Ω—å —Å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–º/—Ç–∏–º–ª–∏–¥–æ–º?\n'
            '–î–∞\n'
            '–ù–µ—Ç'
        )
        self.send_message(
            '{} –ù–µ—Ç, –Ω–µ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω'.format(self._bot_name)
        )
        assert self.check_latest_response_with_retries(
            '–¢–æ–≥–¥–∞ —Å–Ω–∞—á–∞–ª–∞ —Å–æ–≥–ª–∞—Å—É–π, –∞ –ø–æ—Ç–æ–º –ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ (—Ç—ã –∑–Ω–∞–µ—à—å –≥–¥–µ –º–µ–Ω—è –Ω–∞–π—Ç–∏).'
        )

    def test_sending_work_from_home_request_for_dd_mm(self):
        """Tests if it's possible to send a work from home request for a specific date. """

        self.choose_general_channel()

        date = (datetime.now() + timedelta(days=5))
        dd_mm = date.strftime('%d.%m')
        dd_mm_yy = date.strftime('%d.%m.%Y')
        self._send_work_from_home_request(dd_mm, dd_mm_yy)

    def test_sending_work_from_home_request_for_tomorrow(self):
        """Tests if it's possible to send a work from home request for tomorrow. """

        self.choose_general_channel()

        today = datetime.now()
        expect = (today + timedelta(days=1)).strftime('%d.%m.%Y')
        self._send_work_from_home_request('–∑–∞–≤—Ç—Ä–∞', expect)

    def test_sending_work_from_home_request_for_today(self):
        """Tests if it's possible to send a work from home request for today. """

        self.choose_general_channel()

        today = datetime.now()
        expect = today.strftime('%d.%m.%Y')
        self._send_work_from_home_request('—Å–µ–≥–æ–¥–Ω—è', expect)

    def test_sending_work_from_home_request_when_previous_one_is_approved(self):
        """Tests if it's not possible to send a work from home request when the
        previous one has already been approved.
        """

        self.choose_general_channel()

        today = datetime.now()
        expect = today.strftime('%d.%m.%Y')

        self._send_work_from_home_request('—Å–µ–≥–æ–¥–Ω—è', expect, reject=False)

        self.send_message(
            '{} —Ä–∞–±–æ—Ç–∞—é –∏–∑ –¥–æ–º–∞'.format(self._bot_name)
        )
        assert self.check_latest_response_with_retries(
            "–¢—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—à—å –∏–∑ –¥–æ–º–∞ {}. "
            "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –≤—Å–µ –æ—Ç–º–µ–Ω–∏—Ç—å, —Å–∫–∞–∂–∏ '–Ω–µ —Ä–∞–±–æ—Ç–∞—é –∏–∑ –¥–æ–º–∞' üòâ."
            .format(expect)
        )

    def test_cancelling_approved_work_from_home_request(self):
        """Tests if it's possible to reject a work from home request which has
        already been approved.
        """

        self.choose_general_channel()

        self.send_message(
            '{} –Ω–µ —Ä–∞–±–æ—Ç–∞—é –∏–∑ –¥–æ–º–∞'.format(self._bot_name)
        )
        assert self.check_latest_response_with_retries(
            r'(^–Ø —Ç–µ–±—è –ø–æ–Ω—è–ª(.*)$)',
            match=True
        )

        self.send_message(
            '{} –Ω–µ —Ä–∞–±–æ—Ç–∞—é –∏–∑ –¥–æ–º–∞'.format(self._bot_name)
        )
        assert self.check_latest_response_with_retries(
            '–£ —Ç–µ–±—è –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –¥–µ–Ω—å —Ä–∞–±–æ—Ç—ã –∏–∑ –¥–æ–º–∞, '
            '–∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã –æ—Ç–º–µ–Ω–∏—Ç—å, –∞ –ø—Ä–æ—à–ª–æ–≥–æ –Ω–µ –≤–µ—Ä–Ω–µ—à—å...'
        )

    def test_sending_time_off_request_from_regular_user(self):
        """Tests if it's possible to send a time off request from a regular user. """

        self.logout()
        self.login(use_test_user=True)

        self.choose_general_channel()

        self.send_message(
            '{} {} —Ö–æ—á–µ—Ç –æ—Ç–≥—É–ª'.format(self._bot_name, self.test_username)
        )
        assert self.check_latest_response_with_retries(
            '–£ —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã üôÑ'
        )

        self.logout()
        self.login()

    def test_sending_time_off_request_from_admin(self):
        """Tests if it's possible to send a time off request from the admin. """

        self.choose_general_channel()

        self.send_message(
            '{} {} —Ö–æ—á–µ—Ç –æ—Ç–≥—É–ª'.format(self._bot_name, self.test_username)
        )
        assert self.check_latest_response_with_retries(
            '–ö–æ–≥–¥–∞ @{} —Ö–æ—á–µ—Ç –≤–∑—è—Ç—å –æ—Ç–≥—É–ª?'.format(self.test_username)
        )

        self.send_message(
            '{} {} —Ö–æ—á–µ—Ç –æ—Ç–≥—É–ª'.format(self._bot_name, self.test_username)
        )
        assert self.check_latest_response_with_retries(
            '–îa–≤–∞–π –ø–æ –ø–æ—Ä—è–¥–∫—É. –ö–∞–∫–æ–≥–æ —á–∏—Å–ª–∞ @{} —Ö–æ—á–µ—Ç –≤–∑—è—Ç—å –æ—Ç–≥—É–ª?'
            .format(self.test_username)
        )

        self.send_message(
            '{} {} —Ö–æ—á–µ—Ç –æ—Ç–≥—É–ª'.format(self._bot_name, self.username)
        )
        assert self.check_latest_response_with_retries(
            '–îa–≤–∞–π –ø–æ –ø–æ—Ä—è–¥–∫—É. –ö–∞–∫–æ–≥–æ —á–∏—Å–ª–∞ @{} —Ö–æ—á–µ—Ç –≤–∑—è—Ç—å –æ—Ç–≥—É–ª?'
            .format(self.test_username)
        )

        today = datetime.now().strftime('%d.%m')
        today_full = datetime.now().strftime('%d.%m.%Y')
        tomorrow = (datetime.now() + timedelta(days=1)).strftime('%d.%m')

        self.send_message('{} {}'.format(self._bot_name, today))
        assert self.check_latest_response_with_retries(
            '–û—Ç–ª–∏—á–Ω–æ. –ó–Ω–∞—á–∏—Ç @{} –±–µ—Ä–µ—Ç –æ—Ç–≥—É–ª {}. –ö–∞–∫–æ–π —ç—Ç–æ –±—É–¥–µ—Ç –æ—Ç–≥—É–ª?\n'
            '–° –æ—Ç—Ä–∞–±–æ—Ç–∫–æ–π\n'
            '–ó–∞ —Å–≤–æ–π —Å—á–µ—Ç\n'
            '–í —Å—á–µ—Ç –æ—Ç–ø—É—Å–∫–∞\n'
            '–û—Ç–º–µ–Ω–∞'.format(self.test_username, today)
        )

        self.send_message('{} {}'.format(self._bot_name, tomorrow))
        assert self.check_latest_response_with_retries(
            '–î–∞–≤–∞–π –ø–æ –ø–æ—Ä—è–¥–∫—É. @{} –±–µ—Ä–µ—Ç –æ—Ç–≥—É–ª *{}*. –ö–∞–∫–æ–π —ç—Ç–æ –±—É–¥–µ—Ç –æ—Ç–≥—É–ª?\n'
            '–° –æ—Ç—Ä–∞–±–æ—Ç–∫–æ–π\n'
            '–ó–∞ —Å–≤–æ–π —Å—á–µ—Ç\n'
            '–í —Å—á–µ—Ç –æ—Ç–ø—É—Å–∫–∞\n'
            '–û—Ç–º–µ–Ω–∞'.format(self.test_username, today_full)
        )

        self.send_message('{} –° –æ—Ç—Ä–∞–±–æ—Ç–∫–æ–π'.format(self._bot_name))
        assert self.check_latest_response_with_retries(
            '–û—Ç–ª–∏—á–Ω–æ. –ó–Ω–∞—á–∏—Ç @{} –±–µ—Ä–µ—Ç –æ—Ç–≥—É–ª —Å –æ—Ç—Ä–∞–±–æ—Ç–∫–æ–π {}.'
            .format(self.test_username, today_full)
        )

        self.send_message('{} –° –æ—Ç—Ä–∞–±–æ—Ç–∫–æ–π'.format(self._bot_name))
        assert self.check_latest_response_with_retries(
            '–Ø –Ω–µ –∑–Ω–∞–ª, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–±–∏—Ä–∞–ª—Å—è –±—Ä–∞—Ç—å –æ—Ç–≥—É–ª. '
            '–ï—Å–ª–∏ —Ö–æ—á–µ—à—å —Å–æ–æ–±—â–∏—Ç—å –æ–± –æ—Ç–≥—É–ª–µ, —Å–∫–∞–∂–∏ @username —Ö–æ—á–µ—Ç –æ—Ç–≥—É–ª.'
        )

    def test_sending_ill_request_without_working_from_home_and_interrupting_it(self):
        """Tests if it's not possible to send a partially completed ill
        request (without working from home).
        """

        self.choose_general_channel()

        self.send_message(
            '{} –±–æ–ª–µ—é'.format(self._bot_name)
        )
        assert self.check_latest_response_with_retries(
            '–û—á–µ–Ω—å –∂–∞–ª—å. –¢—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑ –¥–æ–º–∞ –≤ —ç—Ç–∏ –¥–Ω–∏?\n'
            '–î–∞\n'
            '–ù–µ—Ç'
        )

        self.send_message(
            '{} –ë–æ–ª–µ—é –∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é'.format(self._bot_name)
        )
        assert self.check_latest_response_with_retries(
            '–Ø –ø–æ–Ω—è–ª. –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ –ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–º/—Ç–∏–º–ª–∏–¥–æ–º?\n'
            '–î–∞\n'
            '–ù–µ—Ç'
        )

        self.send_message(
            '{} –ù–µ—Ç, –æ–Ω–∏ –Ω–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω—ã, —á—Ç–æ —è –±–æ–ª–µ—é'.format(self._bot_name)
        )
        assert self.check_latest_response_with_retries(
            '–¢–æ–≥–¥–∞ —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏, –∞ –ø–æ—Ç–æ–º –≤–µ—Ä–Ω–∏—Å—å –∏ –ø–æ–≤—Ç–æ—Ä–∏ –≤—Å–µ —Å–Ω–æ–≤–∞!'
        )

    def test_sending_ill_request_with_working_from_home_and_interrupting_it(self):
        """Tests if it's not possible to send a partially completed ill
        request (with working from home).
        """

        self.choose_general_channel()

        self.send_message(
            '{} –±–æ–ª–µ—é'.format(self._bot_name)
        )
        assert self.check_latest_response_with_retries(
            '–û—á–µ–Ω—å –∂–∞–ª—å. –¢—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑ –¥–æ–º–∞ –≤ —ç—Ç–∏ –¥–Ω–∏?\n'
            '–î–∞\n'
            '–ù–µ—Ç'
        )

        self.send_message(
            '{} –ë–æ–ª–µ—é –∏ —Ä–∞–±–æ—Ç–∞—é'.format(self._bot_name)
        )
        assert self.check_latest_response_with_retries(
            '–Ø –ø–æ–Ω—è–ª. –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ –ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–º/—Ç–∏–º–ª–∏–¥–æ–º?\n'
            '–î–∞\n'
            '–ù–µ—Ç'
        )

        self.send_message(
            '{} –ù–µ—Ç, –æ–Ω–∏ –Ω–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω—ã, —á—Ç–æ —è –±–æ–ª–µ—é'.format(self._bot_name)
        )
        assert self.check_latest_response_with_retries(
            '–¢–æ–≥–¥–∞ —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏, –∞ –ø–æ—Ç–æ–º –≤–µ—Ä–Ω–∏—Å—å –∏ –ø–æ–≤—Ç–æ—Ä–∏ –≤—Å–µ —Å–Ω–æ–≤–∞!'
        )

    def test_sending_ill_request(self):
        """Tests if it's possible to send an ill request and approve it. """

        self.choose_general_channel()

        self.send_message(
            '{} –±–æ–ª–µ—é'.format(self._bot_name)
        )
        assert self.check_latest_response_with_retries(
            '–û—á–µ–Ω—å –∂–∞–ª—å. –¢—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑ –¥–æ–º–∞ –≤ —ç—Ç–∏ –¥–Ω–∏?\n'
            '–î–∞\n'
            '–ù–µ—Ç'
        )

        self.send_message(
            '{} –ë–æ–ª–µ—é –∏ —Ä–∞–±–æ—Ç–∞—é'.format(self._bot_name)
        )
        assert self.check_latest_response_with_retries(
            '–Ø –ø–æ–Ω—è–ª. –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ –ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–º/—Ç–∏–º–ª–∏–¥–æ–º?\n'
            '–î–∞\n'
            '–ù–µ—Ç'
        )

        self.send_message(
            '{} –î–∞, –æ–Ω–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω—ã, —á—Ç–æ —è –±–æ–ª–µ—é'.format(self._bot_name)
        )
        assert self.check_latest_response_with_retries(
            r'(^Ok\. –í—ã–∑–¥–æ—Ä–∞–≤–ª–∏–≤–∞–π –ø–æ—Å–∫–æ—Ä–µ–µ\.(.*)'
            r'–ö–æ–≥–¥–∞ —Ç—ã –≤—ã–π–¥–µ—à—å –Ω–∞ —Ä–∞–±–æ—Ç—É, —Å–∫–∞–∂–∏ –º–Ω–µ \`—è –Ω–µ –±–æ–ª–µ—é\`\.$)',
            match=True
        )

        self.switch_channel('leave-coordination')
        assert self.check_latest_response_with_retries(
            '@{} –±–æ–ª–µ–µ—Ç –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–∑ –¥–æ–º–∞'.format(self.username)
        )

    def test_sending_ill_request_when_previous_one_is_approved(self):
        """Tests if it's not possible to send an ill request when the previous
        one has already been approved.
        """

        self.choose_general_channel()

        self.send_message(
            '{} –±–æ–ª–µ—é'.format(self._bot_name)
        )
        assert self.check_latest_response_with_retries(
            '–Ø —É–∂–µ —Å–ª—ã—à–∞–ª, —á—Ç–æ —Ç—ã –±–æ–ª–µ–µ—à—å. ü§î'
        )

    def test_cancelling_approved_ill_request(self):
        """Tests if it's possible to cancel the ill request which has already been approved. """

        self.choose_general_channel()

        self.send_message(
            '{} –Ω–µ –±–æ–ª–µ—é'.format(self._bot_name)
        )
        assert self.check_latest_response_with_retries(
            r'(^–†–∞–¥ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è —Å–Ω–æ–≤–∞!(.*)$)',
            match=True
        )

        self.send_message(
            '{} –Ω–µ –±–æ–ª–µ—é'.format(self._bot_name)
        )
        assert self.check_latest_response_with_retries(
            '–Ø –Ω–∏—á–µ–≥–æ –Ω–µ –∑–Ω–∞–ª –æ —Ç–≤–æ–µ–π –±–æ–ª–µ–∑–Ω–∏. ü§î'
        )


def main():
    """The main entry point. """

    parser = ArgumentParser(description='usage: %prog [options] arguments')
    parser.add_argument('-a', '--host', dest='host', type=str,
                        help='allows specifying admin username')
    parser.add_argument('-u', '--username', dest='username', type=str,
                        help='allows specifying admin username')
    parser.add_argument('-p', '--password', dest='password', type=str,
                        help='allows specifying admin password')
    options = parser.parse_args()

    if not options.host:
        parser.error('Host is not specified')

    if not options.username:
        parser.error('Username is not specified')

    if not options.password:
        parser.error('Password is not specified')

    test_cases = VivaLasVegasScriptTestCase(options.host, options.username,
                                            options.password,
                                            create_test_user=True)
    test_cases.run()


if __name__ == '__main__':
    main()
